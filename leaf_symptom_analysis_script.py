
# Plant Disease Symptom Measurement Script
# Author: Generated by AI
# Requirements: opencv-python, numpy, scikit-image, matplotlib


def analyze_leaf(image_path):
    results = {}

    # Load and resize the image
    image = cv2.imread(image_path)
    image = cv2.resize(image, (256, 256))
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # 1. Lesion Count
    _, thresh = cv2.threshold(gray, 60, 255, cv2.THRESH_BINARY_INV)
    contours, _ = cv2.findContours(
        thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    lesion_areas = [cv2.contourArea(c)
                    for c in contours if cv2.contourArea(c) > 30]
    results['lesion_count'] = len(lesion_areas)

    # 2. Average Spot Diameter
    diameters = [np.sqrt(4 * a / np.pi) for a in lesion_areas]
    results['avg_diameter'] = np.mean(diameters) if diameters else 0

    # 3. Ring Count using HoughCircles
    blurred = cv2.medianBlur(gray, 5)
    circles = cv2.HoughCircles(blurred, cv2.HOUGH_GRADIENT,
                               1.2, 20, param1=50, param2=30, minRadius=5, maxRadius=50)
    results['ring_count'] = 0 if circles is None else len(circles[0])

    # 4. Yellowing Area (%)
    yellow_mask = cv2.inRange(hsv, (20, 100, 100), (30, 255, 255))
    yellow_area = np.sum(yellow_mask > 0)
    total_area = image.shape[0] * image.shape[1]
    results['yellow_area_percent'] = (yellow_area / total_area) * 100

    # 5. Greasy Lesion Shape Irregularity
    shape_irregularity = [cv2.arcLength(
        c, True) ** 2 / (4 * np.pi * cv2.contourArea(c)) for c in contours if cv2.contourArea(c) > 30]
    results['avg_irregularity'] = np.mean(
        shape_irregularity) if shape_irregularity else 0

    # 6. HSV Color Shift
    lesion_mask = cv2.inRange(gray, 0, 80)
    mean_hsv = cv2.mean(hsv, mask=lesion_mask)[:3]
    results['hsv_shift'] = np.linalg.norm(
        np.array(mean_hsv) - np.array([60, 60, 60]))

    # 7. Edge Roughness Index
    edges = cv2.Canny(gray, 100, 200)
    roughness = cv2.countNonZero(edges) / total_area
    results['edge_roughness'] = roughness

    # 8. Curl Index: width to height ratio
    x, y, w, h = cv2.boundingRect(thresh)
    results['curl_index'] = w / h if h != 0 else 0

    # 9. Texture Entropy using GLCM
    glcm = graycomatrix(gray, distances=[5], angles=[
                        0], levels=256, symmetric=True, normed=True)
    results['texture_entropy'] = graycoprops(glcm, 'contrast')[0, 0]

    # 10. Internode Length: Manual annotation needed
    results['internode_length'] = "Manual measurement required"

    # 11. Green Intensity and Branch Count
    mean_green = np.mean(image[:, :, 1])
    results['mean_green_intensity'] = mean_green
    results['branch_count'] = "Manual or skeleton-based count"

    # 12. Speck Count
    speck_mask = cv2.inRange(gray, 0, 30)
    speck_contours, _ = cv2.findContours(
        speck_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    results['speck_count'] = len(
        [c for c in speck_contours if cv2.contourArea(c) > 5])

    # 13. Rust Area (%)
    rust_mask = cv2.inRange(hsv, (5, 100, 100), (20, 255, 255))
    rust_area = np.sum(rust_mask > 0)
    results['rust_area_percent'] = (rust_area / total_area) * 100

    # 14. Pustule Count
    rust_contours, _ = cv2.findContours(
        rust_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    results['pustule_count'] = len(
        [c for c in rust_contours if cv2.contourArea(c) > 10])

    # 15. Leaf Droop Angle: Manual/advanced estimation
    results['droop_angle'] = "Requires keypoint estimation or manual measurement"

    return results
